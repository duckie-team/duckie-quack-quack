/*
 * Designed and developed by Duckie Team 2023.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/duckie-team/quack-quack-android/blob/main/LICENSE
 */

/*
 * Designed and developed by Duckie Team 2023.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/duckie-team/quack-quack-android/blob/main/LICENSE
 */

package team.duckie.quackquack.util.backend

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec

public fun getGeneratedFileComment(source: String): String =
  "This file was automatically generated by $source.\nDo not modify it manually."

public const val FormatterOffComment: String = "\n@formatter:off"

public val SuppressAnnotation: AnnotationSpec = AnnotationSpec
  .builder(Suppress::class)
  .addMember(
    "%S, %S, %S, %S, %S, %S, %S, %S, %S, %S, %S, %S",
    "NoConsecutiveBlankLines",
    "PackageDirectoryMismatch",
    "Wrapping",
    "TrailingCommaOnCallSite",
    "ArgumentListWrapping",
    "RedundantVisibilityModifier",
    "UnusedImport",
    "NoUnusedImports",
    "SpacingAroundParens",
    "Indentation",
    "NoUnitReturn",
    "ktlint",
  )
  .useSiteTarget(AnnotationSpec.UseSiteTarget.FILE)
  .build()

public fun FileSpec.Builder.addAnnotations(vararg annotations: AnnotationSpec): FileSpec.Builder =
  addAnnotations(annotations.asList())

public fun FileSpec.Builder.addAnnotations(annotations: List<AnnotationSpec>): FileSpec.Builder =
  apply {
    annotations.forEach { annotation ->
      addAnnotation(annotation)
    }
  }

public fun FileSpec.Builder.addFunctions(vararg functions: FunSpec): FileSpec.Builder =
  addFunctions(functions.asList())

public fun FileSpec.Builder.addFunctions(functions: List<FunSpec>): FileSpec.Builder =
  apply {
    functions.forEach { function ->
      addFunction(function)
    }
  }
