/*
 * Designed and developed by Duckie Team 2023.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/duckie-team/quack-quack-android/blob/2.x.x/LICENSE
 */

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.asTypeName
import com.squareup.kotlinpoet.buildCodeBlock
import java.io.File

private const val GeneratedComment = "This file was automatically generated by core-aide-processor.\n" +
        "Do not modify it arbitrarily."

private val suppressAnnotation = AnnotationSpec
    .builder(Suppress::class)
    .addMember(
        "%S, %S, %S, %S, %S, %S",
        "NoConsecutiveBlankLines",
        "PackageDirectoryMismatch",
        "Wrapping",
        "TrailingCommaOnCallSite",
        "ArgumentListWrapping",
        "ktlint",
    )
    .useSiteTarget(AnnotationSpec.UseSiteTarget.FILE)
    .build()

private fun createQuackComponentsFileSpec(components: Set<String>): FileSpec {
    val quackComponents = PropertySpec
        .builder(
            name = "quackComponents",
            type = List::class.asTypeName().parameterizedBy(String::class.asTypeName()),
        )
        .addModifiers(KModifier.INTERNAL)
        .initializer(components.toLiteralListString())
        .build()

    return FileSpec
        .builder(
            packageName = "",
            fileName = "QuackComponents",
        )
        .addFileComment(GeneratedComment)
        .addAnnotation(suppressAnnotation)
        .addProperty(quackComponents)
        .build()
}

internal fun generateQuackComponents(
    codeGenerator: CodeGenerator,
    logger: KSPLogger,
    symbols: Sequence<KSFunctionDeclaration>,
    aidePath: String?,
) {
    val quackComponents = symbols.map { component ->
        component.simpleName.asString().also { name ->
            logger.warn("[AIDE] QuackComponent: $name")
        }
    }

    val quackComponentsFileSpec = createQuackComponentsFileSpec(quackComponents.toSet())
    generateFile(
        codeGenerator = codeGenerator,
        fileSpec = quackComponentsFileSpec,
        aidePath = aidePath,
        logger = logger,
    )
}

private fun createAideModifiersFileSpec(groupedModifiers: List<Pair<String, Set<String>>>): FileSpec {
    val aideModifiers = PropertySpec
        .builder(
            name = "aideModifiers",
            type = Map::class.asTypeName().parameterizedBy(
                String::class.asTypeName(),
                List::class.asTypeName().parameterizedBy(String::class.asTypeName()),
            ),
        )
        .addModifiers(KModifier.INTERNAL)
        .initializer(
            codeBlock = buildCodeBlock {
                beginControlFlow("run")
                addStatement(
                    "val aide = mutableMapOf<%T, %T>()",
                    String::class,
                    List::class.parameterizedBy(String::class),
                )
                groupedModifiers.forEach { (domain, modifiers) ->
                    addStatement("")
                    addStatement("aide[%S] = %L", domain, modifiers.toLiteralListString())
                    modifiers.forEach { modifier ->
                        addStatement("aide[%S] = %L()", "_$modifier", "emptyList")
                    }
                }
                addStatement("")
                addStatement("aide")
                endControlFlow()
            },
        )
        .build()

    return FileSpec
        .builder(
            packageName = "",
            fileName = "AideModifiers",
        )
        .addFileComment(GeneratedComment)
        .addAnnotation(suppressAnnotation)
        .addProperty(aideModifiers)
        .build()
}

internal fun generateAideModifiers(
    codeGenerator: CodeGenerator,
    logger: KSPLogger,
    symbols: Sequence<KSFunctionDeclaration>,
    aidePath: String?,
) {
    val allGroupedModifiers = mutableListOf<Pair<String, Set<String>>>()
    symbols
        .groupBy { modifier ->
            val domainFile = modifier.requireContainingFile.fileName
            domainFile.removeSuffix(".kt")
        }
        .forEach { (domain, modifiers) ->
            val modifierNames = modifiers.map { modifier ->
                modifier.simpleName.asString()
            }
            allGroupedModifiers += domain to modifierNames.toSet()
            logger.warn("[AIDE] $domain to ${modifierNames.toLiteralListString()}")
        }

    val aideModifiersFileSpec = createAideModifiersFileSpec(allGroupedModifiers)
    generateFile(
        codeGenerator = codeGenerator,
        fileSpec = aideModifiersFileSpec,
        aidePath = aidePath,
        logger = logger,
    )
}

private fun generateFile(
    codeGenerator: CodeGenerator,
    fileSpec: FileSpec,
    aidePath: String?,
    logger: KSPLogger,
) {
    val generatedPath: String
    if (aidePath == null) {
        val fileOutstream = codeGenerator.createNewFile(
            dependencies = Dependencies.Empty,
            packageName = fileSpec.packageName,
            fileName = fileSpec.name,
        )
        fileOutstream.writer().use(fileSpec::writeTo)
        generatedPath = fileSpec.packageName + "/" + fileSpec.name + ".kt"
    } else {
        val file = File(aidePath, "${fileSpec.name}.kt").also { file ->
            if (!file.exists()) {
                file.parentFile.mkdirs()
                file.createNewFile()
            }
        }
        file.writeText(fileSpec.toString())
        generatedPath = file.path
    }
    logger.warn("[AIDE] generated at $generatedPath")
}
