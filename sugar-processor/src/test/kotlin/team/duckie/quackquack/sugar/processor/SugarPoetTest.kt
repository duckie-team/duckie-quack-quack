/*
 * Designed and developed by Duckie Team 2023.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/duckie-team/quack-quack-android/blob/main/LICENSE
 */

@file:OptIn(ExperimentalCompilerApi::class)
@file:Suppress(
  "RedundantUnitReturnType",
  "RedundantVisibilityModifier",
  "RedundantUnitExpression",
  "RedundantSuppression",
  "LongMethod",
  "HasPlatformType",
  "KDocUnresolvedReference",
)

package team.duckie.quackquack.sugar.processor

import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.PluginOption
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.SourceFile.Companion.kotlin
import io.kotest.core.spec.style.StringSpec
import io.kotest.engine.spec.tempdir
import io.kotest.matchers.shouldBe
import org.intellij.lang.annotations.Language
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.jetbrains.kotlin.config.JvmTarget
import team.duckie.quackquack.util.backend.test.findGeneratedFileOrNull
import team.duckie.quackquack.util.backend.test.removePackageLine

// TODO: @Imports 테스트 작성
class SugarPoetTest : StringSpec() {
  private val tempDir = tempdir()

  init {
    """
    - @SugarName이 없을 때는 기본 정책대로 sugar component가 생성됨
    - KDoc이 없는 대상은 KDoc을 생성하지 않음
    """ {
      val result = compile(
        kotlin(
          "text.kt",
          """
import team.duckie.quackquack.sugar.material.SugarToken
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier

@Composable
fun QuackText(
    modifier: Modifier = Modifier,
    text: String,
    @SugarToken style: AwesomeType2,
    singleLine: Boolean = false,
    softWrap: Boolean = true,
) {}
          """,
        ),
      )

      @Language("kotlin")
      val expect = """
// This file was automatically generated by sugar-processor.
// Do not modify it manually.
// @formatter:off
@file:Suppress("NoConsecutiveBlankLines", "PackageDirectoryMismatch", "Wrapping",
    "TrailingCommaOnCallSite", "ArgumentListWrapping", "RedundantVisibilityModifier",
    "UnusedImport", "NoUnusedImports", "SpacingAroundParens", "Indentation", "NoUnitReturn",
    "RedundantUnitReturnType", "ModifierParameter", "KDocUnresolvedReference", "NoTrailingSpaces",
    "NoMultipleSpaces", "ktlint")
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile


import AwesomeType2
import QuackText
import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import team.duckie.quackquack.casa.`annotation`.Casa
import team.duckie.quackquack.casa.`annotation`.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar

@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackOneText(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType2.One,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackTwoText(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType2.Two,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackThreeText(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType2.Three,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

      """.trimIndent()

      result.exitCode shouldBe KotlinCompilation.ExitCode.OK
      tempDir.findGeneratedFileOrNull("text.kt")?.readText()?.removePackageLine() shouldBe expect
    }

    """
    - PREFIX_NAME + Awesome + TOKEN_NAME 조합으로 sugar component를 생성함
    - KDoc이 있는 대상은 Generated KDoc을 생성함
    """ {
      val result = compile(
        kotlin(
          "text.kt",
          """
import team.duckie.quackquack.sugar.material.SugarToken
import team.duckie.quackquack.sugar.material.SugarName
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier

/**
 * AWESOME! 
 *
 * @param modifier 적용할 Modifier
 * @param text 표시할 문자 
 */
@SugarName(SugarName.PREFIX_NAME + "Awesome" + SugarName.TOKEN_NAME)
@Composable
fun QuackText(
    modifier: Modifier = Modifier,
    text: String,
    @SugarToken style: AwesomeType2,
    singleLine: Boolean = false,
    softWrap: Boolean = true,
) {}
          """,
        ),
      )

      @Language("kotlin")
      val expect = """
// This file was automatically generated by sugar-processor.
// Do not modify it manually.
// @formatter:off
@file:Suppress("NoConsecutiveBlankLines", "PackageDirectoryMismatch", "Wrapping",
    "TrailingCommaOnCallSite", "ArgumentListWrapping", "RedundantVisibilityModifier",
    "UnusedImport", "NoUnusedImports", "SpacingAroundParens", "Indentation", "NoUnitReturn",
    "RedundantUnitReturnType", "ModifierParameter", "KDocUnresolvedReference", "NoTrailingSpaces",
    "NoMultipleSpaces", "ktlint")
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile


import AwesomeType2
import QuackText
import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import team.duckie.quackquack.casa.`annotation`.Casa
import team.duckie.quackquack.casa.`annotation`.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar

/**
 * AWESOME!
 *
 * This component uses `AwesomeType2.One` as the token value for `style`.
 *
 * This document was automatically generated by [QuackText].
 * If any contents are broken, please check the original document.
 *
 * @param modifier 적용할 Modifier
 * @param text 표시할 문자
 */
@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackAwesomeOne(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType2.One,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

/**
 * AWESOME!
 *
 * This component uses `AwesomeType2.Two` as the token value for `style`.
 *
 * This document was automatically generated by [QuackText].
 * If any contents are broken, please check the original document.
 *
 * @param modifier 적용할 Modifier
 * @param text 표시할 문자
 */
@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackAwesomeTwo(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType2.Two,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

/**
 * AWESOME!
 *
 * This component uses `AwesomeType2.Three` as the token value for `style`.
 *
 * This document was automatically generated by [QuackText].
 * If any contents are broken, please check the original document.
 *
 * @param modifier 적용할 Modifier
 * @param text 표시할 문자
 */
@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackAwesomeThree(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType2.Three,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

      """.trimIndent()

      result.exitCode shouldBe KotlinCompilation.ExitCode.OK
      tempDir.findGeneratedFileOrNull("text.kt")?.readText()?.removePackageLine() shouldBe expect
    }

    "DEFAULT_NAME을 사용하면 기본 정책대로 sugar component가 생성됨" {
      val result = compile(
        kotlin(
          "text.kt",
          """
import team.duckie.quackquack.sugar.material.SugarToken
import team.duckie.quackquack.sugar.material.SugarName
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier

@SugarName(SugarName.DEFAULT_NAME)
@Composable
fun QuackText(
    modifier: Modifier = Modifier,
    text: String,
    @SugarToken style: AwesomeType,
    singleLine: Boolean = false,
    softWrap: Boolean = true,
) {}
          """,
        ),
      )

      @Language("kotlin")
      val expect = """
// This file was automatically generated by sugar-processor.
// Do not modify it manually.
// @formatter:off
@file:Suppress("NoConsecutiveBlankLines", "PackageDirectoryMismatch", "Wrapping",
    "TrailingCommaOnCallSite", "ArgumentListWrapping", "RedundantVisibilityModifier",
    "UnusedImport", "NoUnusedImports", "SpacingAroundParens", "Indentation", "NoUnitReturn",
    "RedundantUnitReturnType", "ModifierParameter", "KDocUnresolvedReference", "NoTrailingSpaces",
    "NoMultipleSpaces", "ktlint")
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile


import AwesomeType
import QuackText
import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import kotlin.Boolean
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import team.duckie.quackquack.casa.`annotation`.Casa
import team.duckie.quackquack.casa.`annotation`.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar

@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackText")
public fun QuackOneText(
  modifier: Modifier = sugar(),
  text: String,
  singleLine: Boolean = sugar(),
  softWrap: Boolean = sugar(),
): Unit {
  QuackText(
    modifier = modifier,
    text = text,
    style = AwesomeType.One,
    singleLine = singleLine,
    softWrap = softWrap,
  )
}

      """.trimIndent()

      result.exitCode shouldBe KotlinCompilation.ExitCode.OK
      tempDir.findGeneratedFileOrNull("text.kt")?.readText()?.removePackageLine() shouldBe expect
    }

    "람다 인자가 지원됨" {
      val result = compile(
        kotlin(
          "checkbox.kt",
          """
import team.duckie.quackquack.sugar.material.SugarToken
import androidx.compose.runtime.Composable

@Composable
fun QuackCheckbox(
    @SugarToken style: AwesomeType,
    onCheckChanged: (checked: Boolean) -> Unit,
) {}

@Composable
fun QuackCheckbox2(
    @SugarToken style: AwesomeType,
    onCheckChanged: suspend Boolean.(checked: Boolean) -> Boolean,
) {}
          """,
        ),
      )

      @Language("kotlin")
      val expect = """
// This file was automatically generated by sugar-processor.
// Do not modify it manually.
// @formatter:off
@file:Suppress("NoConsecutiveBlankLines", "PackageDirectoryMismatch", "Wrapping",
    "TrailingCommaOnCallSite", "ArgumentListWrapping", "RedundantVisibilityModifier",
    "UnusedImport", "NoUnusedImports", "SpacingAroundParens", "Indentation", "NoUnitReturn",
    "RedundantUnitReturnType", "ModifierParameter", "KDocUnresolvedReference", "NoTrailingSpaces",
    "NoMultipleSpaces", "ktlint")
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile


import AwesomeType
import QuackCheckbox
import QuackCheckbox2
import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import kotlin.Boolean
import kotlin.Function1
import kotlin.OptIn
import kotlin.Suppress
import kotlin.Unit
import kotlin.coroutines.SuspendFunction2
import team.duckie.quackquack.casa.`annotation`.Casa
import team.duckie.quackquack.casa.`annotation`.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar

@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackCheckbox")
public fun QuackOneCheckbox(onCheckChanged: (P0: Boolean) -> Unit): Unit {
  QuackCheckbox(
    style = AwesomeType.One,
    onCheckChanged = onCheckChanged,
  )
}

@Casa
@Composable
@NonRestartableComposable
@SugarRefer("QuackCheckbox2")
public fun QuackOneCheckbox2(onCheckChanged: suspend (P0: Boolean, P1: Boolean) -> Boolean): Unit {
  QuackCheckbox2(
    style = AwesomeType.One,
    onCheckChanged = onCheckChanged,
  )
}

      """.trimIndent()

      result.exitCode shouldBe KotlinCompilation.ExitCode.OK
      tempDir.findGeneratedFileOrNull("checkbox.kt")?.readText()?.removePackageLine() shouldBe expect
    }
  }

  private fun compile(vararg sourceFiles: SourceFile): KotlinCompilation.Result {
    return prepareCompilation(*sourceFiles).compile()
  }

  private fun prepareCompilation(vararg sourceFiles: SourceFile): KotlinCompilation {
    return KotlinCompilation().apply {
      workingDir = tempDir
      sources = sourceFiles.asList() + stubs
      jvmTarget = JvmTarget.JVM_17.toString()
      inheritClassPath = true
      supportsK2 = false
      useK2 = false
      pluginOptions = listOf(
        PluginOption(
          pluginId = PluginId,
          optionName = OPTION_SUGAR_PATH.optionName,
          optionValue = tempDir.path,
        ),
        PluginOption(
          pluginId = PluginId,
          optionName = OPTION_POET.optionName,
          optionValue = "true",
        ),
      )
      compilerPluginRegistrars = listOf(SugarComponentRegistrar.asPluginRegistrar())
      commandLineProcessors = listOf(SugarCommandLineProcessor())
    }
  }
}
