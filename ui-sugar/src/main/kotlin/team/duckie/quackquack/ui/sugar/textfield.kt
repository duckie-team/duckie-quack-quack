// This file was automatically generated by sugar-core.
// Do not modify it manually.
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile

package team.duckie.quackquack.ui.sugar

import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.TextLayoutResult
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.input.VisualTransformation
import team.duckie.quackquack.casa.annotation.Casa
import team.duckie.quackquack.casa.annotation.CasaValue
import team.duckie.quackquack.casa.annotation.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar
import team.duckie.quackquack.ui.QuackDefaultTextField
import team.duckie.quackquack.ui.QuackFilledTextField
import team.duckie.quackquack.ui.QuackTextFieldStyle
import team.duckie.quackquack.ui.TextFieldPlaceholderStrategy
import team.duckie.quackquack.ui.TextFieldValidationLabelVisibilityStrategy
import team.duckie.quackquack.ui.TextFieldValidationState
import team.duckie.quackquack.ui.optin.ExperimentalDesignToken
import team.duckie.quackquack.ui.util.ExperimentalQuackQuackApi

/**
 * Default 텍스트 필드를 그립니다.
 *
 * This component uses [QuackTextFieldStyle.Default] as the token value for `style`.
 *
 * This document was automatically generated by [QuackDefaultTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param value 텍스트 필드에 입력된 글자
 * @param onValueChange 입력 서비스가 글자를 업데이트할 때 호출되는 콜백입니다. 업데이트된 글자는 콜백의 매개변수로 제공됩니다.
 * @param enabled 텍스트 필드의 활성화 상태를 제어합니다. false면 텍스트 필드를 편집하거나 포커스를 맞출 수 없으며
 * 텍스트 필드에 글자를 입력할 수 없습니다.
 * @param readOnly 텍스트 필드의 편집 가능한 상태를 제어합니다. true면 텍스트 필드를 수정할 수 없지만 사용자가 포커스를 맞추고
 * 텍스트를 복사할 수 있습니다. 읽기 전용 텍스트 필드는 일반적으로 사용자가 편집할 수 없는 미리 채워진 양식을 표시하는 데 사용됩니다.
 * @param placeholderText 입력된 글자가 없을 때 표시할 대체 글자
 * @param placeholderStrategy [placeholderText]의 시각적 정책. 자세한 정보는 [TextFieldPlaceholderStrategy] 문서를
 * 참고하세요.
 * @param keyboardOptions 키보드 유형 및 [ImeAction]과 같은 구성이 포함된 소프트웨어 키보드 옵션입니다.
 * @param keyboardActions 입력 서비스가 IME 액션을 방출하면 해당 콜백이 호출됩니다. 이 IME 액션은 [KeyboardOptions.imeAction]에
 * 지정한 것과 다를 수 있습니다.
 * @param singleLine true로 설정하면 이 텍스트 필드가 여러 줄로 줄 바꿈되지 않고 가로로 스크롤되는 단일 텍스트 필드가 됩니다.
 * 키보드에 [ImeAction]으로 return 키가 표시되지 않도록 알려줍니다. [maxLines] 및 [minLines]는 모두 자동으로 1로 설정되므로 무시됩니다.
 * @param minLines 텍스트 필드에 표시하기 위한 최소 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param maxLines 텍스트 필드에 표시될 수 있는 최대 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param visualTransformation [value]의 시각적 표현을 변경할 수 있는 필터입니다. 기본적으로 적용되지 않습니다.
 * @param onTextLayout 새 텍스트 레이아웃이 계산될 때 실행되는 콜백입니다. 콜백이 제공하는 [TextLayoutResult] 객체에는 단락 정보,
 * 텍스트의 크기, 기준선 및 기타 세부 정보가 포함됩니다. 콜백은 텍스트에 장식이나 기능을 추가하는 데 사용할 수 있습니다.
 * 예를 들어 텍스트 주위에 커서나 선택 영역을 그리는 데 사용할 수 있습니다.
 * @param validationState 텍스트 필드의 검증 결과. 자세한 정보는 [TextFieldValidationState] 문서를 참고하세요.
 * 만약 [검증 결과 문구][TextFieldValidationState.WithLabel]를 제공하고 [defaultTextFieldIndicator] 데코레이터가 사용됐을
 * 경우,
 * 인디케이터의 방향이 [Bottom][VerticalDirection.Bottom]이여야 합니다.
 * @Param validationLabelVisibilityStrategy [validationState]를 설명할 문구가 제공됐다면 해당 문구의 시각적 정책.
 * 자세한 내용은 [TextFieldValidationLabelVisibilityStrategy] 문서를 참고하세요.
 * @param interactionSource 이 텍스트 필드의 인터랙션 스트림을 나타내는 변경 가능한 인터랙션 소스입니다. 인터랙션을 관찰하고
 * 다른 인터랙션에서 이 텍스트 필드의 모양/동작을 커스터마이징하려면 자신만의 변경 가능한 인터랙션 소스를 생성하여 전달할 수 있습니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackDefaultTextField")
fun QuackDefaultDefaultTextField(
  @CasaValue("\"QuackDefaultTextFieldPreview\"") `value`: String,
  @CasaValue("{}") onValueChange: (P0: String) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  validationState: TextFieldValidationState = sugar(),
  validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackDefaultTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.Default,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    validationState = validationState,
    validationLabelVisibilityStrategy = validationLabelVisibilityStrategy,
    interactionSource = interactionSource,
  )
}

/**
 * Default 텍스트 필드를 그립니다.
 *
 * This component uses [QuackTextFieldStyle.DefaultLarge] as the token value for `style`.
 *
 * This document was automatically generated by [QuackDefaultTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param value 텍스트 필드에 입력된 글자
 * @param onValueChange 입력 서비스가 글자를 업데이트할 때 호출되는 콜백입니다. 업데이트된 글자는 콜백의 매개변수로 제공됩니다.
 * @param enabled 텍스트 필드의 활성화 상태를 제어합니다. false면 텍스트 필드를 편집하거나 포커스를 맞출 수 없으며
 * 텍스트 필드에 글자를 입력할 수 없습니다.
 * @param readOnly 텍스트 필드의 편집 가능한 상태를 제어합니다. true면 텍스트 필드를 수정할 수 없지만 사용자가 포커스를 맞추고
 * 텍스트를 복사할 수 있습니다. 읽기 전용 텍스트 필드는 일반적으로 사용자가 편집할 수 없는 미리 채워진 양식을 표시하는 데 사용됩니다.
 * @param placeholderText 입력된 글자가 없을 때 표시할 대체 글자
 * @param placeholderStrategy [placeholderText]의 시각적 정책. 자세한 정보는 [TextFieldPlaceholderStrategy] 문서를
 * 참고하세요.
 * @param keyboardOptions 키보드 유형 및 [ImeAction]과 같은 구성이 포함된 소프트웨어 키보드 옵션입니다.
 * @param keyboardActions 입력 서비스가 IME 액션을 방출하면 해당 콜백이 호출됩니다. 이 IME 액션은 [KeyboardOptions.imeAction]에
 * 지정한 것과 다를 수 있습니다.
 * @param singleLine true로 설정하면 이 텍스트 필드가 여러 줄로 줄 바꿈되지 않고 가로로 스크롤되는 단일 텍스트 필드가 됩니다.
 * 키보드에 [ImeAction]으로 return 키가 표시되지 않도록 알려줍니다. [maxLines] 및 [minLines]는 모두 자동으로 1로 설정되므로 무시됩니다.
 * @param minLines 텍스트 필드에 표시하기 위한 최소 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param maxLines 텍스트 필드에 표시될 수 있는 최대 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param visualTransformation [value]의 시각적 표현을 변경할 수 있는 필터입니다. 기본적으로 적용되지 않습니다.
 * @param onTextLayout 새 텍스트 레이아웃이 계산될 때 실행되는 콜백입니다. 콜백이 제공하는 [TextLayoutResult] 객체에는 단락 정보,
 * 텍스트의 크기, 기준선 및 기타 세부 정보가 포함됩니다. 콜백은 텍스트에 장식이나 기능을 추가하는 데 사용할 수 있습니다.
 * 예를 들어 텍스트 주위에 커서나 선택 영역을 그리는 데 사용할 수 있습니다.
 * @param validationState 텍스트 필드의 검증 결과. 자세한 정보는 [TextFieldValidationState] 문서를 참고하세요.
 * 만약 [검증 결과 문구][TextFieldValidationState.WithLabel]를 제공하고 [defaultTextFieldIndicator] 데코레이터가 사용됐을
 * 경우,
 * 인디케이터의 방향이 [Bottom][VerticalDirection.Bottom]이여야 합니다.
 * @Param validationLabelVisibilityStrategy [validationState]를 설명할 문구가 제공됐다면 해당 문구의 시각적 정책.
 * 자세한 내용은 [TextFieldValidationLabelVisibilityStrategy] 문서를 참고하세요.
 * @param interactionSource 이 텍스트 필드의 인터랙션 스트림을 나타내는 변경 가능한 인터랙션 소스입니다. 인터랙션을 관찰하고
 * 다른 인터랙션에서 이 텍스트 필드의 모양/동작을 커스터마이징하려면 자신만의 변경 가능한 인터랙션 소스를 생성하여 전달할 수 있습니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackDefaultTextField")
fun QuackDefaultLargeDefaultTextField(
  @CasaValue("\"QuackDefaultTextFieldPreview\"") `value`: String,
  @CasaValue("{}") onValueChange: (P0: String) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  validationState: TextFieldValidationState = sugar(),
  validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackDefaultTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.DefaultLarge,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    validationState = validationState,
    validationLabelVisibilityStrategy = validationLabelVisibilityStrategy,
    interactionSource = interactionSource,
  )
}

/**
 * Default 텍스트 필드를 그립니다.
 *
 * This component uses [QuackTextFieldStyle.Default] as the token value for `style`.
 *
 * This document was automatically generated by [QuackDefaultTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param value 텍스트 필드에 입력된 글자
 * @param onValueChange 입력 서비스가 글자를 업데이트할 때 호출되는 콜백입니다. 업데이트된 글자는 콜백의 매개변수로 제공됩니다.
 * @param enabled 텍스트 필드의 활성화 상태를 제어합니다. false면 텍스트 필드를 편집하거나 포커스를 맞출 수 없으며
 * 텍스트 필드에 글자를 입력할 수 없습니다.
 * @param readOnly 텍스트 필드의 편집 가능한 상태를 제어합니다. true면 텍스트 필드를 수정할 수 없지만 사용자가 포커스를 맞추고
 * 텍스트를 복사할 수 있습니다. 읽기 전용 텍스트 필드는 일반적으로 사용자가 편집할 수 없는 미리 채워진 양식을 표시하는 데 사용됩니다.
 * @param placeholderText 입력된 글자가 없을 때 표시할 대체 글자
 * @param placeholderStrategy [placeholderText]의 시각적 정책. 자세한 정보는 [TextFieldPlaceholderStrategy] 문서를
 * 참고하세요.
 * @param keyboardOptions 키보드 유형 및 [ImeAction]과 같은 구성이 포함된 소프트웨어 키보드 옵션입니다.
 * @param keyboardActions 입력 서비스가 IME 액션을 방출하면 해당 콜백이 호출됩니다. 이 IME 액션은 [KeyboardOptions.imeAction]에
 * 지정한 것과 다를 수 있습니다.
 * @param singleLine true로 설정하면 이 텍스트 필드가 여러 줄로 줄 바꿈되지 않고 가로로 스크롤되는 단일 텍스트 필드가 됩니다.
 * 키보드에 [ImeAction]으로 return 키가 표시되지 않도록 알려줍니다. [maxLines] 및 [minLines]는 모두 자동으로 1로 설정되므로 무시됩니다.
 * @param minLines 텍스트 필드에 표시하기 위한 최소 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param maxLines 텍스트 필드에 표시될 수 있는 최대 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param visualTransformation [value]의 시각적 표현을 변경할 수 있는 필터입니다. 기본적으로 적용되지 않습니다.
 * @param onTextLayout 새 텍스트 레이아웃이 계산될 때 실행되는 콜백입니다. 콜백이 제공하는 [TextLayoutResult] 객체에는 단락 정보,
 * 텍스트의 크기, 기준선 및 기타 세부 정보가 포함됩니다. 콜백은 텍스트에 장식이나 기능을 추가하는 데 사용할 수 있습니다.
 * 예를 들어 텍스트 주위에 커서나 선택 영역을 그리는 데 사용할 수 있습니다.
 * @param validationState 텍스트 필드의 검증 결과. 자세한 정보는 [TextFieldValidationState] 문서를 참고하세요.
 * 만약 [검증 결과 문구][TextFieldValidationState.WithLabel]를 제공하고 [defaultTextFieldIndicator] 데코레이터가 사용됐을
 * 경우,
 * 인디케이터의 방향이 [Bottom][VerticalDirection.Bottom]이여야 합니다.
 * @Param validationLabelVisibilityStrategy [validationState]를 설명할 문구가 제공됐다면 해당 문구의 시각적 정책.
 * 자세한 내용은 [TextFieldValidationLabelVisibilityStrategy] 문서를 참고하세요.
 * @param interactionSource 이 텍스트 필드의 인터랙션 스트림을 나타내는 변경 가능한 인터랙션 소스입니다. 인터랙션을 관찰하고
 * 다른 인터랙션에서 이 텍스트 필드의 모양/동작을 커스터마이징하려면 자신만의 변경 가능한 인터랙션 소스를 생성하여 전달할 수 있습니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackDefaultTextField")
fun QuackDefaultDefaultTextField(
  `value`: TextFieldValue,
  onValueChange: (P0: TextFieldValue) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  validationState: TextFieldValidationState = sugar(),
  validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackDefaultTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.Default,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    validationState = validationState,
    validationLabelVisibilityStrategy = validationLabelVisibilityStrategy,
    interactionSource = interactionSource,
  )
}

/**
 * Default 텍스트 필드를 그립니다.
 *
 * This component uses [QuackTextFieldStyle.DefaultLarge] as the token value for `style`.
 *
 * This document was automatically generated by [QuackDefaultTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param value 텍스트 필드에 입력된 글자
 * @param onValueChange 입력 서비스가 글자를 업데이트할 때 호출되는 콜백입니다. 업데이트된 글자는 콜백의 매개변수로 제공됩니다.
 * @param enabled 텍스트 필드의 활성화 상태를 제어합니다. false면 텍스트 필드를 편집하거나 포커스를 맞출 수 없으며
 * 텍스트 필드에 글자를 입력할 수 없습니다.
 * @param readOnly 텍스트 필드의 편집 가능한 상태를 제어합니다. true면 텍스트 필드를 수정할 수 없지만 사용자가 포커스를 맞추고
 * 텍스트를 복사할 수 있습니다. 읽기 전용 텍스트 필드는 일반적으로 사용자가 편집할 수 없는 미리 채워진 양식을 표시하는 데 사용됩니다.
 * @param placeholderText 입력된 글자가 없을 때 표시할 대체 글자
 * @param placeholderStrategy [placeholderText]의 시각적 정책. 자세한 정보는 [TextFieldPlaceholderStrategy] 문서를
 * 참고하세요.
 * @param keyboardOptions 키보드 유형 및 [ImeAction]과 같은 구성이 포함된 소프트웨어 키보드 옵션입니다.
 * @param keyboardActions 입력 서비스가 IME 액션을 방출하면 해당 콜백이 호출됩니다. 이 IME 액션은 [KeyboardOptions.imeAction]에
 * 지정한 것과 다를 수 있습니다.
 * @param singleLine true로 설정하면 이 텍스트 필드가 여러 줄로 줄 바꿈되지 않고 가로로 스크롤되는 단일 텍스트 필드가 됩니다.
 * 키보드에 [ImeAction]으로 return 키가 표시되지 않도록 알려줍니다. [maxLines] 및 [minLines]는 모두 자동으로 1로 설정되므로 무시됩니다.
 * @param minLines 텍스트 필드에 표시하기 위한 최소 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param maxLines 텍스트 필드에 표시될 수 있는 최대 줄 수입니다. `1 <= minLines <= maxLines`가 요구됩니다. [singleLine]이
 * true면
 * 이 옵션은 무시됩니다.
 * @param visualTransformation [value]의 시각적 표현을 변경할 수 있는 필터입니다. 기본적으로 적용되지 않습니다.
 * @param onTextLayout 새 텍스트 레이아웃이 계산될 때 실행되는 콜백입니다. 콜백이 제공하는 [TextLayoutResult] 객체에는 단락 정보,
 * 텍스트의 크기, 기준선 및 기타 세부 정보가 포함됩니다. 콜백은 텍스트에 장식이나 기능을 추가하는 데 사용할 수 있습니다.
 * 예를 들어 텍스트 주위에 커서나 선택 영역을 그리는 데 사용할 수 있습니다.
 * @param validationState 텍스트 필드의 검증 결과. 자세한 정보는 [TextFieldValidationState] 문서를 참고하세요.
 * 만약 [검증 결과 문구][TextFieldValidationState.WithLabel]를 제공하고 [defaultTextFieldIndicator] 데코레이터가 사용됐을
 * 경우,
 * 인디케이터의 방향이 [Bottom][VerticalDirection.Bottom]이여야 합니다.
 * @Param validationLabelVisibilityStrategy [validationState]를 설명할 문구가 제공됐다면 해당 문구의 시각적 정책.
 * 자세한 내용은 [TextFieldValidationLabelVisibilityStrategy] 문서를 참고하세요.
 * @param interactionSource 이 텍스트 필드의 인터랙션 스트림을 나타내는 변경 가능한 인터랙션 소스입니다. 인터랙션을 관찰하고
 * 다른 인터랙션에서 이 텍스트 필드의 모양/동작을 커스터마이징하려면 자신만의 변경 가능한 인터랙션 소스를 생성하여 전달할 수 있습니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackDefaultTextField")
fun QuackDefaultLargeDefaultTextField(
  `value`: TextFieldValue,
  onValueChange: (P0: TextFieldValue) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  validationState: TextFieldValidationState = sugar(),
  validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackDefaultTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.DefaultLarge,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    validationState = validationState,
    validationLabelVisibilityStrategy = validationLabelVisibilityStrategy,
    interactionSource = interactionSource,
  )
}

/**
 * This component uses [QuackTextFieldStyle.FilledLarge] as the token value for `style`.
 *
 * This document was automatically generated by [QuackFilledTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackFilledTextField")
fun QuackFilledLargeFilledTextField(
  @CasaValue("\"QuackFilledTextFieldPreview\"") `value`: String,
  @CasaValue("{}") onValueChange: (P0: String) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackFilledTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.FilledLarge,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    interactionSource = interactionSource,
  )
}

/**
 * This component uses [QuackTextFieldStyle.FilledFlat] as the token value for `style`.
 *
 * This document was automatically generated by [QuackFilledTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackFilledTextField")
fun QuackFilledFlatFilledTextField(
  @CasaValue("\"QuackFilledTextFieldPreview\"") `value`: String,
  @CasaValue("{}") onValueChange: (P0: String) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackFilledTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.FilledFlat,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    interactionSource = interactionSource,
  )
}

/**
 * This component uses [QuackTextFieldStyle.FilledLarge] as the token value for `style`.
 *
 * This document was automatically generated by [QuackFilledTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackFilledTextField")
fun QuackFilledLargeFilledTextField(
  `value`: TextFieldValue,
  onValueChange: (P0: TextFieldValue) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackFilledTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.FilledLarge,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    interactionSource = interactionSource,
  )
}

/**
 * This component uses [QuackTextFieldStyle.FilledFlat] as the token value for `style`.
 *
 * This document was automatically generated by [QuackFilledTextField].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalDesignToken
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackFilledTextField")
fun QuackFilledFlatFilledTextField(
  `value`: TextFieldValue,
  onValueChange: (P0: TextFieldValue) -> Unit,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  readOnly: Boolean = sugar(),
  placeholderText: String? = sugar(),
  placeholderStrategy: TextFieldPlaceholderStrategy = sugar(),
  keyboardOptions: KeyboardOptions = sugar(),
  keyboardActions: KeyboardActions = sugar(),
  singleLine: Boolean = sugar(),
  minLines: Int = sugar(),
  maxLines: Int = sugar(),
  visualTransformation: VisualTransformation = sugar(),
  onTextLayout: (P0: TextLayoutResult) -> Unit = sugar(),
  interactionSource: MutableInteractionSource = sugar(),
) {
  QuackFilledTextField(
    value = value,
    onValueChange = onValueChange,
    style = QuackTextFieldStyle.FilledFlat,
    modifier = modifier,
    enabled = enabled,
    readOnly = readOnly,
    placeholderText = placeholderText,
    placeholderStrategy = placeholderStrategy,
    keyboardOptions = keyboardOptions,
    keyboardActions = keyboardActions,
    singleLine = singleLine,
    minLines = minLines,
    maxLines = maxLines,
    visualTransformation = visualTransformation,
    onTextLayout = onTextLayout,
    interactionSource = interactionSource,
  )
}
