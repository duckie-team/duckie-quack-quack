/*
 * Designed and developed by Duckie Team 2023.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/duckie-team/quack-quack-android/blob/2.x.x/LICENSE
 */

@file:OptIn(ExperimentalCompilerApi::class)
@file:Suppress(
    "RedundantUnitReturnType",
    "RedundantVisibilityModifier",
    "RedundantUnitExpression",
    "RedundantSuppression",
    "LongMethod",
    "HasPlatformType",
    "KDocUnresolvedReference",
)

import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.PluginOption
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.SourceFile.Companion.kotlin
import java.io.File
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.jetbrains.kotlin.config.JvmTarget
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder
import strikt.api.expectThat
import strikt.assertions.isEqualTo
import strikt.assertions.withNotNull

class SugarIrVisitPoetTest {
    @get:Rule
    val temporaryFolder = TemporaryFolder.builder().assureDeletion().build()
    private val sugarPath by lazy { temporaryFolder.root.path }

    @Test
    fun `no @SugarName generation`() {
        val result = compile(
            kotlin(
                "TextStyle.kt",
                """
                @JvmInline
                value class TextStyle(val index: Int) {
                    companion object {
                        val One = TextStyle(1)
                        val Two = TextStyle(2)
                        val Three = TextStyle(3)
                    }
                }
                """,
            ),
            kotlin(
                "text.kt",
                """
                import team.duckie.quackquack.sugar.material.SugarToken
                import team.duckie.quackquack.sugar.material.SugarName
                import androidx.compose.runtime.Composable
                import androidx.compose.ui.Modifier

                @Composable
                fun QuackText(
                    modifier: Modifier = Modifier,
                    text: String,
                    @SugarToken style: TextStyle,
                    singleLine: Boolean = false,
                    softWrap: Boolean = true,
                ) {}
                """,
            ),
        )

        expectThat(result.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)
        expectThat(findGeneratedSugarFileOrNull("text.kt")).withNotNull {
            get(File::readText).isKtEqualToWithoutPackage(
                """
                // This file was automatically generated by core-sugar-processor-kotlinc.
                // Do not modify it arbitrarily.
                @file:Suppress("NoConsecutiveBlankLines", "ModifierParameter", "RedundantUnitReturnType",
                    "Wrapping", "TrailingCommaOnCallSite", "NoUnitReturn", "ArgumentListWrapping", "ktlint")
                @file:OptIn(SugarCompilerApi::class)
                @file:GeneratedFile


                import QuackText
                import TextStyle
                import androidx.compose.runtime.Composable
                import androidx.compose.ui.Modifier
                import kotlin.Boolean
                import kotlin.OptIn
                import kotlin.String
                import kotlin.Suppress
                import kotlin.Unit
                import team.duckie.quackquack.sugar.material.GeneratedFile
                import team.duckie.quackquack.sugar.material.SugarCompilerApi
                import team.duckie.quackquack.sugar.material.SugarRefer
                import team.duckie.quackquack.sugar.material.sugar
                
                /**
                 * This document was auto-generated. Please see [QuackText] for details.
                 */
                @Composable
                @SugarRefer("QuackText")
                public fun QuackOneText(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText(
                    modifier = modifier,
                    text = text,
                    style = TextStyle.One,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }
                
                /**
                 * This document was auto-generated. Please see [QuackText] for details.
                 */
                @Composable
                @SugarRefer("QuackText")
                public fun QuackTwoText(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText(
                    modifier = modifier,
                    text = text,
                    style = TextStyle.Two,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }
                
                /**
                 * This document was auto-generated. Please see [QuackText] for details.
                 */
                @Composable
                @SugarRefer("QuackText")
                public fun QuackThreeText(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText(
                    modifier = modifier,
                    text = text,
                    style = TextStyle.Three,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }

                """,
            )
        }
    }

    @Test
    fun `PREFIX_NAME + Awesome + TOKEN_NAME generation`() {
        val result = compile(
            kotlin(
                "TextStyle2.kt",
                """
                @JvmInline
                value class TextStyle2(val index: Int) {
                    companion object {
                        val One = TextStyle2(1)
                        val Two = TextStyle2(2)
                        val Three = TextStyle2(3)
                    }
                }
                """,
            ),
            kotlin(
                "text2.kt",
                """
                import team.duckie.quackquack.sugar.material.SugarToken
                import team.duckie.quackquack.sugar.material.SugarName
                import androidx.compose.runtime.Composable
                import androidx.compose.ui.Modifier
                
                /**
                 * AWESOME! 
                 */
                @SugarName(SugarName.PREFIX_NAME + "Awesome" + SugarName.TOKEN_NAME)
                @Composable
                fun QuackText2(
                    modifier: Modifier = Modifier,
                    text: String,
                    @SugarToken style: TextStyle2,
                    singleLine: Boolean = false,
                    softWrap: Boolean = true,
                ) {}
                """,
            ),
        )

        expectThat(result.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)
        expectThat(findGeneratedSugarFileOrNull("text2.kt")).withNotNull {
            get(File::readText).isKtEqualToWithoutPackage(
                """
                // This file was automatically generated by core-sugar-processor-kotlinc.
                // Do not modify it arbitrarily.
                @file:Suppress("NoConsecutiveBlankLines", "ModifierParameter", "RedundantUnitReturnType",
                    "Wrapping", "TrailingCommaOnCallSite", "NoUnitReturn", "ArgumentListWrapping", "ktlint")
                @file:OptIn(SugarCompilerApi::class)
                @file:GeneratedFile


                import QuackText2
                import TextStyle2
                import androidx.compose.runtime.Composable
                import androidx.compose.ui.Modifier
                import kotlin.Boolean
                import kotlin.OptIn
                import kotlin.String
                import kotlin.Suppress
                import kotlin.Unit
                import team.duckie.quackquack.sugar.material.GeneratedFile
                import team.duckie.quackquack.sugar.material.SugarCompilerApi
                import team.duckie.quackquack.sugar.material.SugarRefer
                import team.duckie.quackquack.sugar.material.sugar
                
                /**
                 * AWESOME!
                 *
                 * This document was auto-generated. Please see [QuackText2] for details.
                 */
                @Composable
                @SugarRefer("QuackText2")
                public fun QuackAwesomeOne(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText2(
                    modifier = modifier,
                    text = text,
                    style = TextStyle2.One,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }
                
                /**
                 * AWESOME!
                 *
                 * This document was auto-generated. Please see [QuackText2] for details.
                 */
                @Composable
                @SugarRefer("QuackText2")
                public fun QuackAwesomeTwo(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText2(
                    modifier = modifier,
                    text = text,
                    style = TextStyle2.Two,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }
                
                /**
                 * AWESOME!
                 *
                 * This document was auto-generated. Please see [QuackText2] for details.
                 */
                @Composable
                @SugarRefer("QuackText2")
                public fun QuackAwesomeThree(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText2(
                    modifier = modifier,
                    text = text,
                    style = TextStyle2.Three,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }

                """,
            )
        }
    }

    @Test
    fun `DEFAULT_NAME generation`() {
        val result = compile(
            kotlin(
                "TextStyle3.kt",
                """
                @JvmInline
                value class TextStyle3(val index: Int) {
                    companion object {
                        val One = TextStyle3(1)
                        val Two = TextStyle3(2)
                        val Three = TextStyle3(3)
                    }
                }
                """,
            ),
            kotlin(
                "text3.kt",
                """
                import team.duckie.quackquack.sugar.material.SugarToken
                import team.duckie.quackquack.sugar.material.SugarName
                import androidx.compose.runtime.Composable
                import androidx.compose.ui.Modifier

                @SugarName(SugarName.DEFAULT_NAME)
                @Composable
                fun QuackText3(
                    modifier: Modifier = Modifier,
                    text: String,
                    @SugarToken style: TextStyle3,
                    singleLine: Boolean = false,
                    softWrap: Boolean = true,
                ) {}
                """,
            ),
        )

        expectThat(result.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)
        expectThat(findGeneratedSugarFileOrNull("text3.kt")).withNotNull {
            get(File::readText).isKtEqualToWithoutPackage(
                """
                // This file was automatically generated by core-sugar-processor-kotlinc.
                // Do not modify it arbitrarily.
                @file:Suppress("NoConsecutiveBlankLines", "ModifierParameter", "RedundantUnitReturnType",
                    "Wrapping", "TrailingCommaOnCallSite", "NoUnitReturn", "ArgumentListWrapping", "ktlint")
                @file:OptIn(SugarCompilerApi::class)
                @file:GeneratedFile


                import QuackText3
                import TextStyle3
                import androidx.compose.runtime.Composable
                import androidx.compose.ui.Modifier
                import kotlin.Boolean
                import kotlin.OptIn
                import kotlin.String
                import kotlin.Suppress
                import kotlin.Unit
                import team.duckie.quackquack.sugar.material.GeneratedFile
                import team.duckie.quackquack.sugar.material.SugarCompilerApi
                import team.duckie.quackquack.sugar.material.SugarRefer
                import team.duckie.quackquack.sugar.material.sugar
                
                /**
                 * This document was auto-generated. Please see [QuackText3] for details.
                 */
                @Composable
                @SugarRefer("QuackText3")
                public fun QuackOneText3(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText3(
                    modifier = modifier,
                    text = text,
                    style = TextStyle3.One,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }
                
                /**
                 * This document was auto-generated. Please see [QuackText3] for details.
                 */
                @Composable
                @SugarRefer("QuackText3")
                public fun QuackTwoText3(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText3(
                    modifier = modifier,
                    text = text,
                    style = TextStyle3.Two,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }
                
                /**
                 * This document was auto-generated. Please see [QuackText3] for details.
                 */
                @Composable
                @SugarRefer("QuackText3")
                public fun QuackThreeText3(
                  modifier: Modifier = sugar(),
                  text: String,
                  singleLine: Boolean = sugar(),
                  softWrap: Boolean = sugar(),
                ): Unit {
                  QuackText3(
                    modifier = modifier,
                    text = text,
                    style = TextStyle3.Three,
                    singleLine = singleLine,
                    softWrap = softWrap,
                  )
                }

                """,
            )
        }
    }

    private fun compile(vararg sourceFiles: SourceFile): KotlinCompilation.Result {
        return prepareCompilation(*sourceFiles).compile()
    }

    private fun prepareCompilation(vararg sourceFiles: SourceFile): KotlinCompilation {
        return KotlinCompilation().apply {
            workingDir = temporaryFolder.root
            sources = sourceFiles.asList() + stubs
            jvmTarget = JvmTarget.JVM_17.toString()
            supportsK2 = false
            pluginOptions = listOf(
                PluginOption(
                    pluginId = PluginId,
                    optionName = OPTION_SUGAR_PATH.optionName,
                    optionValue = sugarPath,
                ),
                PluginOption(
                    pluginId = PluginId,
                    optionName = OPTION_POET.optionName,
                    optionValue = "true",
                ),
            )
            verbose = false
            inheritClassPath = true
            compilerPluginRegistrars = listOf(SugarComponentRegistrar.asPluginRegistrar())
            commandLineProcessors = listOf(SugarCommandLineProcessor())
            useK2 = false
        }
    }

    private fun findGeneratedSugarFileOrNull(@Suppress("SameParameterValue") fileName: String): File? {
        return File(sugarPath)
            .walkTopDown()
            .find { file ->
                file.name == fileName
            }
    }
}
