scheme("[androidx.compose.ui.UiComposable]") fun QuackButton(
  stable text: String
  stable style: QuackButtonStyle<T>
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuackBaseButton(
  stable modifier: Modifier
  stable text: String
  stable backgroundColor: QuackColor
  stable iconColor: QuackColor
  stable rippleColor: QuackColor
  stable rippleEnabled: Boolean
  stable shape: Shape
  stable border: QuackBorder
  stable typography: QuackTypography
  stable contentPadding: QuackPadding?
  stable iconSpacedBy: Dp
  stable leadingIcon: ImageVector?
  stable trailingIcon: ImageVector?
  stable onClick: Function0<Unit>?
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackIcon(
  stable icon: ImageVector
  stable modifier: Modifier? = @static Companion
  stable size: Dp = @static 24.dp
  stable tint: QuackColor = @static Companion.Unspecified
  stable contentScale: ContentScale? = @static Companion.Fit
  stable contentDescription: String? = @static null
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackImage(
  stable src: ImageVector
  stable modifier: Modifier? = @static Companion
  stable tint: QuackColor = @static Companion.Unspecified
  stable contentScale: ContentScale? = @static Companion.Fit
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackImage(
  stable src: Int
  stable modifier: Modifier? = @static Companion
  stable tint: QuackColor = @static Companion.Unspecified
  stable contentScale: ContentScale? = @static Companion.Fit
  stable contentDescription: String? = @static null
)
fun QuackImage(
  unstable src: Any?
  stable modifier: Modifier? = @static Companion
  stable tint: QuackColor = @static Companion.Unspecified
  stable contentScale: ContentScale? = @static Companion.Fit
  stable contentDescription: String? = @static null
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackPrimaryLargeButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackSecondaryLargeButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackMediumButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackPrimaryFilledSmallButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackPrimaryOutlinedSmallButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackPrimaryOutlinedRoundSmallButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackSecondarySmallButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackSecondaryRoundSmallButton(
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable text: String
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
fun QuackOutlinedTag(
  stable text: String
  stable modifier: Modifier? = @static Companion
  stable selected: Boolean = @static true
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
fun QuackFilledTag(
  stable text: String
  stable modifier: Modifier? = @static Companion
  stable selected: Boolean = @static true
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
fun QuackGrayscaleFlatTag(
  stable text: String
  stable modifier: Modifier? = @static Companion
  stable selected: Boolean = @static true
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
fun QuackGrayscaleOutlinedTag(
  stable text: String
  stable modifier: Modifier? = @static Companion
  stable selected: Boolean = @static true
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackBody1(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackBody2(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackBody3(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackHeadLine1(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackHeadLine2(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackLarge1(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackSubtitle(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackSubtitle2(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackTitle1(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackTitle2(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackTag(
  stable text: String
  stable style: QuackTagStyle<T>
  stable modifier: Modifier? = @static Companion
  stable selected: Boolean = @static true
  stable rippleEnabled: Boolean = @static true
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuackBaseTag(
  stable modifier: Modifier
  stable text: String
  stable backgroundColor: QuackColor
  stable rippleColor: QuackColor
  stable rippleEnabled: Boolean
  stable shape: Shape
  stable border: QuackBorder
  stable typography: QuackTypography
  stable contentPadding: QuackPadding?
  stable iconSpacedBy: Dp
  stable iconColor: QuackColor?
  stable trailingIcon: ImageVector?
  stable trailingIconSize: Dp?
  stable trailingIconOnClick: Function0<Unit>?
  stable onClick: Function0<Unit>?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuackText(
  stable modifier: Modifier? = @static Companion
  stable text: String
  stable typography: QuackTypography
  stable singleLine: Boolean = @static false
  stable softWrap: Boolean = @static true
  stable overflow: TextOverflow = @static Companion.Ellipsis
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ClickableText(
  stable modifier: Modifier
  stable text: String
  stable highlightData: TextHighlightData
  stable style: TextStyle
  stable softWrap: Boolean
  stable overflow: TextOverflow
  stable maxLines: Int
)
fun rememberSpanAnnotatedString(
  stable text: String
  unstable spanTexts: List<String>
  stable spanStyle: SpanStyle
  unstable annotationTexts: List<String>
): AnnotatedString
fun QuackDefaultTextField(
  stable value: String
  stable onValueChange: Function1<@[ParameterName(name = 'value')] String, Unit>
  stable style: QuackTextFieldStyle<Style, TextFieldColors>
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable readOnly: Boolean = @static false
  stable placeholderText: String? = @static null
  stable placeholderStrategy: TextFieldPlaceholderStrategy? = @static TextFieldPlaceholderStrategy.Hidable
  stable keyboardOptions: KeyboardOptions? = @static Companion.Default
  stable keyboardActions: KeyboardActions? = @static Companion.Default
  stable singleLine: Boolean = @static false
  stable minLines: Int = @static 1
  stable maxLines: Int = @dynamic if (singleLine) {
  1
} else {
  Companion  .  MAX_VALUE
}

  stable visualTransformation: VisualTransformation? = @static Companion.None
  stable onTextLayout: Function1<@[ParameterName(name = 'layoutResult')] TextLayoutResult, Unit>? = @static { it: TextLayoutResult ->

}

  stable validationState: TextFieldValidationState? = @static Default
  stable validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy? = @static Gone
  stable interactionSource: MutableInteractionSource? = @static remember({
  MutableInteractionSource  (  )
}
, $composer, 0)
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackDefaultTextField(
  stable value: TextFieldValue
  stable onValueChange: Function1<@[ParameterName(name = 'value')] TextFieldValue, Unit>
  stable style: QuackTextFieldStyle<Style, TextFieldColors>
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable readOnly: Boolean = @static false
  stable placeholderText: String? = @static null
  stable placeholderStrategy: TextFieldPlaceholderStrategy? = @static TextFieldPlaceholderStrategy.Hidable
  stable keyboardOptions: KeyboardOptions? = @static Companion.Default
  stable keyboardActions: KeyboardActions? = @static Companion.Default
  stable singleLine: Boolean = @static false
  stable minLines: Int = @static 1
  stable maxLines: Int = @dynamic if (singleLine) {
  1
} else {
  Companion  .  MAX_VALUE
}

  stable visualTransformation: VisualTransformation? = @static Companion.None
  stable onTextLayout: Function1<@[ParameterName(name = 'layoutResult')] TextLayoutResult, Unit>? = @static { it: TextLayoutResult ->

}

  stable validationState: TextFieldValidationState? = @static Default
  stable validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy? = @static Gone
  stable interactionSource: MutableInteractionSource? = @static remember({
  MutableInteractionSource  (  )
}
, $composer, 0)
)
fun QuackFilledTextField(
  stable value: String
  stable onValueChange: Function1<@[ParameterName(name = 'value')] String, Unit>
  stable style: QuackTextFieldStyle<Style, TextFieldColors>
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable readOnly: Boolean = @static false
  stable placeholderText: String? = @static null
  stable placeholderStrategy: TextFieldPlaceholderStrategy? = @static TextFieldPlaceholderStrategy.Hidable
  stable keyboardOptions: KeyboardOptions? = @static Companion.Default
  stable keyboardActions: KeyboardActions? = @static Companion.Default
  stable singleLine: Boolean = @static false
  stable minLines: Int = @static 1
  stable maxLines: Int = @dynamic if (singleLine) {
  1
} else {
  Companion  .  MAX_VALUE
}

  stable visualTransformation: VisualTransformation? = @static Companion.None
  stable onTextLayout: Function1<@[ParameterName(name = 'layoutResult')] TextLayoutResult, Unit>? = @static { it: TextLayoutResult ->

}

  stable interactionSource: MutableInteractionSource? = @static remember({
  MutableInteractionSource  (  )
}
, $composer, 0)
)
scheme("[androidx.compose.ui.UiComposable]") fun QuackFilledTextField(
  stable value: TextFieldValue
  stable onValueChange: Function1<@[ParameterName(name = 'value')] TextFieldValue, Unit>
  stable style: QuackTextFieldStyle<Style, TextFieldColors>
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @static true
  stable readOnly: Boolean = @static false
  stable placeholderText: String? = @static null
  stable placeholderStrategy: TextFieldPlaceholderStrategy? = @static TextFieldPlaceholderStrategy.Hidable
  stable keyboardOptions: KeyboardOptions? = @static Companion.Default
  stable keyboardActions: KeyboardActions? = @static Companion.Default
  stable singleLine: Boolean = @static false
  stable minLines: Int = @static 1
  stable maxLines: Int = @dynamic if (singleLine) {
  1
} else {
  Companion  .  MAX_VALUE
}

  stable visualTransformation: VisualTransformation? = @static Companion.None
  stable onTextLayout: Function1<@[ParameterName(name = 'layoutResult')] TextLayoutResult, Unit>? = @static { it: TextLayoutResult ->

}

  stable interactionSource: MutableInteractionSource? = @static remember({
  MutableInteractionSource  (  )
}
, $composer, 0)
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuackBaseDefaultTextField(
  stable value: TextFieldValue
  stable onValueChange: Function1<@[ParameterName(name = 'value')] TextFieldValue, Unit>
  stable modifier: Modifier
  stable enabled: Boolean
  stable readOnly: Boolean
  stable placeholderText: String?
  stable placeholderStrategy: TextFieldPlaceholderStrategy
  stable keyboardOptions: KeyboardOptions
  stable keyboardActions: KeyboardActions
  stable singleLine: Boolean
  stable minLines: Int
  stable maxLines: Int
  stable visualTransformation: VisualTransformation
  stable onTextLayout: Function1<@[ParameterName(name = 'layoutResult')] TextLayoutResult, Unit>
  stable validationState: TextFieldValidationState?
  stable validationLabelVisibilityStrategy: TextFieldValidationLabelVisibilityStrategy?
  stable interactionSource: MutableInteractionSource
  stable backgroundColor: QuackColor
  stable contentPadding: PaddingValues?
  stable contentSpacedBy: Dp
  stable validationLabelAndIndicatorSpacedBy: Dp?
  stable typography: QuackTypography
  stable placeholderTypography: QuackTypography
  stable errorTypography: QuackTypography?
  stable successTypography: QuackTypography?
  stable textFieldType: QuackTextFieldType
  stable leadingIcon: ImageVector?
  stable leadingIconSize: Dp?
  stable leadingIconTint: QuackColor?
  stable leadingIconContentScale: ContentScale?
  stable leadingIconContentDescription: String?
  stable leadingIconOnClick: Function0<Unit>?
  stable trailingIcon: ImageVector?
  stable trailingIconSize: Dp?
  stable trailingIconTint: QuackColor?
  stable trailingIconContentScale: ContentScale?
  stable trailingIconContentDescription: String?
  stable trailingIconOnClick: Function0<Unit>?
  stable indicatorThickness: Dp?
  stable indicatorColor: QuackColor?
  stable indicatorDirection: VerticalDirection?
  stable counterBaseColor: QuackColor?
  stable counterHighlightColor: QuackColor?
  stable counterTypography: QuackTypography?
  stable counterBaseAndHighlightGap: Dp?
  stable counterMaxLength: Int?
)
fun QuackOutlinedTextField()
fun rememberLtrTextMeasurer(
  stable cacheSize: Int = @static 8
): TextMeasurer
readonly inline fun currentFontScale(
  stable content: Function1<@[ParameterName(name = 'fontScale')] Float, T>
): T
