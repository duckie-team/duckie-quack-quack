// This file was automatically generated by sugar-core.
// Do not modify it manually.
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile
@file:Suppress("ktlint", "detekt:all", "ModifierParameter")

package team.duckie.quackquack.ui.sugar

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import team.duckie.quackquack.casa.annotation.Casa
import team.duckie.quackquack.casa.annotation.CasaValue
import team.duckie.quackquack.casa.annotation.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar
import team.duckie.quackquack.ui.QuackButton
import team.duckie.quackquack.ui.QuackButtonStyle
import team.duckie.quackquack.ui.util.ExperimentalQuackQuackApi

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.PrimaryLarge] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackPrimaryLargeButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.PrimaryLarge,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.SecondaryLarge] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackSecondaryLargeButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.SecondaryLarge,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.Medium] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackMediumButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.Medium,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.PrimaryFilledSmall] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackPrimaryFilledSmallButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.PrimaryFilledSmall,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.PrimaryOutlinedSmall] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackPrimaryOutlinedSmallButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.PrimaryOutlinedSmall,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.PrimaryOutlinedRoundSmall] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackPrimaryOutlinedRoundSmallButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.PrimaryOutlinedRoundSmall,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.SecondarySmall] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackSecondarySmallButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.SecondarySmall,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 버튼을 그립니다.
 *
 * This component uses [QuackButtonStyle.SecondaryRoundSmall] as the token value for `style`.
 *
 * This document was automatically generated by [QuackButton].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param enabled 활성화 상태 여부
 * @param text 중앙에 표시할 텍스트
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. [enabled]이 true일 때만 작동합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackButton")
public fun QuackSecondaryRoundSmallButton(
  @CasaValue("\"QuackButton is experimental\"") text: String,
  modifier: Modifier = sugar(),
  enabled: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackButton(
    text = text,
    style = QuackButtonStyle.SecondaryRoundSmall,
    modifier = modifier,
    enabled = enabled,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}
