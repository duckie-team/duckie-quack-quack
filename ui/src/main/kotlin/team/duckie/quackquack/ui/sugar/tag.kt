// This file was automatically generated by sugar-processor.
// Do not modify it manually.
// @formatter:off
@file:Suppress("NoConsecutiveBlankLines", "PackageDirectoryMismatch", "Wrapping",
    "TrailingCommaOnCallSite", "ArgumentListWrapping", "RedundantVisibilityModifier",
    "UnusedImport", "NoUnusedImports", "SpacingAroundParens", "Indentation", "NoUnitReturn",
    "RedundantUnitReturnType", "ModifierParameter", "KDocUnresolvedReference", "NoTrailingSpaces",
    "NoMultipleSpaces", "ktlint")
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile

package team.duckie.quackquack.ui.sugar

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import kotlin.Boolean
import kotlin.Function0
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import team.duckie.quackquack.casa.`annotation`.Casa
import team.duckie.quackquack.casa.`annotation`.CasaValue
import team.duckie.quackquack.casa.`annotation`.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar
import team.duckie.quackquack.ui.QuackTag
import team.duckie.quackquack.ui.QuackTagStyle
import team.duckie.quackquack.ui.util.ExperimentalQuackQuackApi

/**
 * 태그를 그립니다.
 *
 * - 이 컴포넌트는 자체의 패딩 정책을 구현합니다.
 * - [스타일][style]별로 사용 가능한 데코레이터가 달라집니다.
 *
 * ### 패딩 정책
 *
 * 1. [태그의 스타일][QuackTagStyle]에서 [contentPadding][QuackTagStyle.contentPadding] 옵션을
 * 별도로 제공하고 있습니다. 이는 [Modifier.padding]과 다른 패딩 정책을 사용합니다. [Modifier.padding]은
 * 태그의 루트 레이아웃을 기준으로 패딩이 적용되지만, [QuackTagStyle.contentPadding]은 태그의
 * 텍스트와 후행 아이콘을 기준으로 적용됩니다. 태그 컴포넌트는 [trailingIcon][Modifier.trailingIcon] 데코레이터로
 * 후행 아이콘을 추가할 수 있고, 후행 아이콘 여부에 따라 패딩 정책이 결정됩니다. 후행 아이콘이 있다면 세로와
 * 가로에 따라 패딩을 적용하는 방식이 달라집니다. 세로의 경우는 태그 텍스트를 기준으로 적용되고, 가로의 경우는
 * 후행 아이콘의 터치 영역을 증가시키는 식으로 적용됩니다. 기본적으로 후행 아이콘은 16px의 사이즈를 갖습니다.
 * 유저 입장에서 16px의 터치 영역은 좋은 경험을 제공하지 못할 것으로 예상하여, [전체 가로 패딩][QuackPadding.vertical]의
 * 오른쪽 영역을 후행 아이콘의 오른쪽 패딩으로 적용합니다. 이때, [전체 가로 패딩][QuackPadding.vertical]의 오른쪽
 * 영역을 그대로 적용하는 게 아니라 해당 값에서 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]을 뺀
 * 값을 적용합니다. 이는 디자인 가이드라인에 의거합니다. 그리고 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]의
 * 반을 후행 아이콘의 왼쪽 패딩으로 적용합니다. [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy] 반의
 * 나머지 부분은 태그 텍스트의 오른쪽 패딩으로 적용됩니다. 후행 아이콘이 없다면 단순히 태그 텍스트를 기준으로 패딩이
 * 적용됩니다.
 * 2. [LayoutModifier]를 사용하여 컴포넌트의 사이즈가 명시됐다면 [QuackTagStyle.contentPadding]
 * 옵션은 무시됩니다. [contentPadding][QuackTagStyle.contentPadding]은 컴포넌트 사이즈 하드코딩을
 * 대체하는 용도로 제공됩니다. 하지만 컴포넌트 사이즈가 하드코딩됐다면 [contentPadding][QuackTagStyle.contentPadding]을
 * 제공하는 의미가 없어집니다. 따라서 컴포넌트의 사이즈가 하드코딩됐다면 개발자의 의도를 존중한다는 원칙하에
 * 컴포넌트의 사이즈가 중첩으로 확장되는 일을 예방하고자 [contentPadding][QuackTagStyle.contentPadding]
 * 옵션을 무시합니다. 예를 들어 `Modifier.height(10.dp)`로 컴포넌트 높이를 명시했고,
 * [contentPadding][QuackTagStyle.contentPadding]으로
 * `QuackPadding(vertical=10.dp)`을 제공했다고 해봅시다. 이런 경우에는
 * [contentPadding][QuackTagStyle.contentPadding]이
 * 무시되고 태그의 높이가 10dp로 적용됩니다. 컴포넌트 사이즈를 명시하면서 패딩을 적용하고 싶다면
 * [contentPadding][QuackTagStyle.contentPadding] 대신에 [Modifier.padding]을 사용하세요.
 * [LayoutModifier]를 사용하는 흔한 [Modifier]로는 [Modifier.size], [Modifier.height], [Modifier.width] 등이
 * 있습니다. [LayoutModifierNode]를 사용하는 [Modifier]는 [contentPadding][QuackTagStyle.contentPadding] 무시
 * 옵션이 아직 지원되지 않습니다. ([#636](https://github.com/duckie-team/quack-quack-android/issues/636))
 *
 * ### 사용 가능 데코레이터
 *
 * |                         style                          | [trailingIcon][Modifier.trailingIcon]
 * |            description             |
 * |:------------------------------------------------------:|:-------------------------------------:|:----------------------------------:|
 * |          [Outlined][QuackOutlinedTagDefaults]          |                   ⭕                  
 * |                                    |
 * |            [Filled][QuackFilledTagDefaults]            |                   ⭕                  
 * |                                    |
 * |     [GrayscaleFlat][QuackGrayscaleFlatTagDefaults]     |                   ❌                  
 * | 태그의 너비가 좁기에 아이콘 데코레이터를 사용할 수 없습니다. |
 * | [GrayscaleOutlined][QuackGrayscaleOutlinedTagDefaults] |                   ⭕                  
 * |                                    |
 *
 * This component uses [QuackTagStyle.Outlined] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackOutlinedTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
): Unit {
  QuackTag(
    text = text,
    style = QuackTagStyle.Outlined,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 태그를 그립니다.
 *
 * - 이 컴포넌트는 자체의 패딩 정책을 구현합니다.
 * - [스타일][style]별로 사용 가능한 데코레이터가 달라집니다.
 *
 * ### 패딩 정책
 *
 * 1. [태그의 스타일][QuackTagStyle]에서 [contentPadding][QuackTagStyle.contentPadding] 옵션을
 * 별도로 제공하고 있습니다. 이는 [Modifier.padding]과 다른 패딩 정책을 사용합니다. [Modifier.padding]은
 * 태그의 루트 레이아웃을 기준으로 패딩이 적용되지만, [QuackTagStyle.contentPadding]은 태그의
 * 텍스트와 후행 아이콘을 기준으로 적용됩니다. 태그 컴포넌트는 [trailingIcon][Modifier.trailingIcon] 데코레이터로
 * 후행 아이콘을 추가할 수 있고, 후행 아이콘 여부에 따라 패딩 정책이 결정됩니다. 후행 아이콘이 있다면 세로와
 * 가로에 따라 패딩을 적용하는 방식이 달라집니다. 세로의 경우는 태그 텍스트를 기준으로 적용되고, 가로의 경우는
 * 후행 아이콘의 터치 영역을 증가시키는 식으로 적용됩니다. 기본적으로 후행 아이콘은 16px의 사이즈를 갖습니다.
 * 유저 입장에서 16px의 터치 영역은 좋은 경험을 제공하지 못할 것으로 예상하여, [전체 가로 패딩][QuackPadding.vertical]의
 * 오른쪽 영역을 후행 아이콘의 오른쪽 패딩으로 적용합니다. 이때, [전체 가로 패딩][QuackPadding.vertical]의 오른쪽
 * 영역을 그대로 적용하는 게 아니라 해당 값에서 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]을 뺀
 * 값을 적용합니다. 이는 디자인 가이드라인에 의거합니다. 그리고 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]의
 * 반을 후행 아이콘의 왼쪽 패딩으로 적용합니다. [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy] 반의
 * 나머지 부분은 태그 텍스트의 오른쪽 패딩으로 적용됩니다. 후행 아이콘이 없다면 단순히 태그 텍스트를 기준으로 패딩이
 * 적용됩니다.
 * 2. [LayoutModifier]를 사용하여 컴포넌트의 사이즈가 명시됐다면 [QuackTagStyle.contentPadding]
 * 옵션은 무시됩니다. [contentPadding][QuackTagStyle.contentPadding]은 컴포넌트 사이즈 하드코딩을
 * 대체하는 용도로 제공됩니다. 하지만 컴포넌트 사이즈가 하드코딩됐다면 [contentPadding][QuackTagStyle.contentPadding]을
 * 제공하는 의미가 없어집니다. 따라서 컴포넌트의 사이즈가 하드코딩됐다면 개발자의 의도를 존중한다는 원칙하에
 * 컴포넌트의 사이즈가 중첩으로 확장되는 일을 예방하고자 [contentPadding][QuackTagStyle.contentPadding]
 * 옵션을 무시합니다. 예를 들어 `Modifier.height(10.dp)`로 컴포넌트 높이를 명시했고,
 * [contentPadding][QuackTagStyle.contentPadding]으로
 * `QuackPadding(vertical=10.dp)`을 제공했다고 해봅시다. 이런 경우에는
 * [contentPadding][QuackTagStyle.contentPadding]이
 * 무시되고 태그의 높이가 10dp로 적용됩니다. 컴포넌트 사이즈를 명시하면서 패딩을 적용하고 싶다면
 * [contentPadding][QuackTagStyle.contentPadding] 대신에 [Modifier.padding]을 사용하세요.
 * [LayoutModifier]를 사용하는 흔한 [Modifier]로는 [Modifier.size], [Modifier.height], [Modifier.width] 등이
 * 있습니다. [LayoutModifierNode]를 사용하는 [Modifier]는 [contentPadding][QuackTagStyle.contentPadding] 무시
 * 옵션이 아직 지원되지 않습니다. ([#636](https://github.com/duckie-team/quack-quack-android/issues/636))
 *
 * ### 사용 가능 데코레이터
 *
 * |                         style                          | [trailingIcon][Modifier.trailingIcon]
 * |            description             |
 * |:------------------------------------------------------:|:-------------------------------------:|:----------------------------------:|
 * |          [Outlined][QuackOutlinedTagDefaults]          |                   ⭕                  
 * |                                    |
 * |            [Filled][QuackFilledTagDefaults]            |                   ⭕                  
 * |                                    |
 * |     [GrayscaleFlat][QuackGrayscaleFlatTagDefaults]     |                   ❌                  
 * | 태그의 너비가 좁기에 아이콘 데코레이터를 사용할 수 없습니다. |
 * | [GrayscaleOutlined][QuackGrayscaleOutlinedTagDefaults] |                   ⭕                  
 * |                                    |
 *
 * This component uses [QuackTagStyle.Filled] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackFilledTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
): Unit {
  QuackTag(
    text = text,
    style = QuackTagStyle.Filled,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 태그를 그립니다.
 *
 * - 이 컴포넌트는 자체의 패딩 정책을 구현합니다.
 * - [스타일][style]별로 사용 가능한 데코레이터가 달라집니다.
 *
 * ### 패딩 정책
 *
 * 1. [태그의 스타일][QuackTagStyle]에서 [contentPadding][QuackTagStyle.contentPadding] 옵션을
 * 별도로 제공하고 있습니다. 이는 [Modifier.padding]과 다른 패딩 정책을 사용합니다. [Modifier.padding]은
 * 태그의 루트 레이아웃을 기준으로 패딩이 적용되지만, [QuackTagStyle.contentPadding]은 태그의
 * 텍스트와 후행 아이콘을 기준으로 적용됩니다. 태그 컴포넌트는 [trailingIcon][Modifier.trailingIcon] 데코레이터로
 * 후행 아이콘을 추가할 수 있고, 후행 아이콘 여부에 따라 패딩 정책이 결정됩니다. 후행 아이콘이 있다면 세로와
 * 가로에 따라 패딩을 적용하는 방식이 달라집니다. 세로의 경우는 태그 텍스트를 기준으로 적용되고, 가로의 경우는
 * 후행 아이콘의 터치 영역을 증가시키는 식으로 적용됩니다. 기본적으로 후행 아이콘은 16px의 사이즈를 갖습니다.
 * 유저 입장에서 16px의 터치 영역은 좋은 경험을 제공하지 못할 것으로 예상하여, [전체 가로 패딩][QuackPadding.vertical]의
 * 오른쪽 영역을 후행 아이콘의 오른쪽 패딩으로 적용합니다. 이때, [전체 가로 패딩][QuackPadding.vertical]의 오른쪽
 * 영역을 그대로 적용하는 게 아니라 해당 값에서 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]을 뺀
 * 값을 적용합니다. 이는 디자인 가이드라인에 의거합니다. 그리고 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]의
 * 반을 후행 아이콘의 왼쪽 패딩으로 적용합니다. [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy] 반의
 * 나머지 부분은 태그 텍스트의 오른쪽 패딩으로 적용됩니다. 후행 아이콘이 없다면 단순히 태그 텍스트를 기준으로 패딩이
 * 적용됩니다.
 * 2. [LayoutModifier]를 사용하여 컴포넌트의 사이즈가 명시됐다면 [QuackTagStyle.contentPadding]
 * 옵션은 무시됩니다. [contentPadding][QuackTagStyle.contentPadding]은 컴포넌트 사이즈 하드코딩을
 * 대체하는 용도로 제공됩니다. 하지만 컴포넌트 사이즈가 하드코딩됐다면 [contentPadding][QuackTagStyle.contentPadding]을
 * 제공하는 의미가 없어집니다. 따라서 컴포넌트의 사이즈가 하드코딩됐다면 개발자의 의도를 존중한다는 원칙하에
 * 컴포넌트의 사이즈가 중첩으로 확장되는 일을 예방하고자 [contentPadding][QuackTagStyle.contentPadding]
 * 옵션을 무시합니다. 예를 들어 `Modifier.height(10.dp)`로 컴포넌트 높이를 명시했고,
 * [contentPadding][QuackTagStyle.contentPadding]으로
 * `QuackPadding(vertical=10.dp)`을 제공했다고 해봅시다. 이런 경우에는
 * [contentPadding][QuackTagStyle.contentPadding]이
 * 무시되고 태그의 높이가 10dp로 적용됩니다. 컴포넌트 사이즈를 명시하면서 패딩을 적용하고 싶다면
 * [contentPadding][QuackTagStyle.contentPadding] 대신에 [Modifier.padding]을 사용하세요.
 * [LayoutModifier]를 사용하는 흔한 [Modifier]로는 [Modifier.size], [Modifier.height], [Modifier.width] 등이
 * 있습니다. [LayoutModifierNode]를 사용하는 [Modifier]는 [contentPadding][QuackTagStyle.contentPadding] 무시
 * 옵션이 아직 지원되지 않습니다. ([#636](https://github.com/duckie-team/quack-quack-android/issues/636))
 *
 * ### 사용 가능 데코레이터
 *
 * |                         style                          | [trailingIcon][Modifier.trailingIcon]
 * |            description             |
 * |:------------------------------------------------------:|:-------------------------------------:|:----------------------------------:|
 * |          [Outlined][QuackOutlinedTagDefaults]          |                   ⭕                  
 * |                                    |
 * |            [Filled][QuackFilledTagDefaults]            |                   ⭕                  
 * |                                    |
 * |     [GrayscaleFlat][QuackGrayscaleFlatTagDefaults]     |                   ❌                  
 * | 태그의 너비가 좁기에 아이콘 데코레이터를 사용할 수 없습니다. |
 * | [GrayscaleOutlined][QuackGrayscaleOutlinedTagDefaults] |                   ⭕                  
 * |                                    |
 *
 * This component uses [QuackTagStyle.GrayscaleFlat] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackGrayscaleFlatTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
): Unit {
  QuackTag(
    text = text,
    style = QuackTagStyle.GrayscaleFlat,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 태그를 그립니다.
 *
 * - 이 컴포넌트는 자체의 패딩 정책을 구현합니다.
 * - [스타일][style]별로 사용 가능한 데코레이터가 달라집니다.
 *
 * ### 패딩 정책
 *
 * 1. [태그의 스타일][QuackTagStyle]에서 [contentPadding][QuackTagStyle.contentPadding] 옵션을
 * 별도로 제공하고 있습니다. 이는 [Modifier.padding]과 다른 패딩 정책을 사용합니다. [Modifier.padding]은
 * 태그의 루트 레이아웃을 기준으로 패딩이 적용되지만, [QuackTagStyle.contentPadding]은 태그의
 * 텍스트와 후행 아이콘을 기준으로 적용됩니다. 태그 컴포넌트는 [trailingIcon][Modifier.trailingIcon] 데코레이터로
 * 후행 아이콘을 추가할 수 있고, 후행 아이콘 여부에 따라 패딩 정책이 결정됩니다. 후행 아이콘이 있다면 세로와
 * 가로에 따라 패딩을 적용하는 방식이 달라집니다. 세로의 경우는 태그 텍스트를 기준으로 적용되고, 가로의 경우는
 * 후행 아이콘의 터치 영역을 증가시키는 식으로 적용됩니다. 기본적으로 후행 아이콘은 16px의 사이즈를 갖습니다.
 * 유저 입장에서 16px의 터치 영역은 좋은 경험을 제공하지 못할 것으로 예상하여, [전체 가로 패딩][QuackPadding.vertical]의
 * 오른쪽 영역을 후행 아이콘의 오른쪽 패딩으로 적용합니다. 이때, [전체 가로 패딩][QuackPadding.vertical]의 오른쪽
 * 영역을 그대로 적용하는 게 아니라 해당 값에서 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]을 뺀
 * 값을 적용합니다. 이는 디자인 가이드라인에 의거합니다. 그리고 [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy]의
 * 반을 후행 아이콘의 왼쪽 패딩으로 적용합니다. [텍스트와 후행 아이콘 사이 공간][QuackTagStyle.iconSpacedBy] 반의
 * 나머지 부분은 태그 텍스트의 오른쪽 패딩으로 적용됩니다. 후행 아이콘이 없다면 단순히 태그 텍스트를 기준으로 패딩이
 * 적용됩니다.
 * 2. [LayoutModifier]를 사용하여 컴포넌트의 사이즈가 명시됐다면 [QuackTagStyle.contentPadding]
 * 옵션은 무시됩니다. [contentPadding][QuackTagStyle.contentPadding]은 컴포넌트 사이즈 하드코딩을
 * 대체하는 용도로 제공됩니다. 하지만 컴포넌트 사이즈가 하드코딩됐다면 [contentPadding][QuackTagStyle.contentPadding]을
 * 제공하는 의미가 없어집니다. 따라서 컴포넌트의 사이즈가 하드코딩됐다면 개발자의 의도를 존중한다는 원칙하에
 * 컴포넌트의 사이즈가 중첩으로 확장되는 일을 예방하고자 [contentPadding][QuackTagStyle.contentPadding]
 * 옵션을 무시합니다. 예를 들어 `Modifier.height(10.dp)`로 컴포넌트 높이를 명시했고,
 * [contentPadding][QuackTagStyle.contentPadding]으로
 * `QuackPadding(vertical=10.dp)`을 제공했다고 해봅시다. 이런 경우에는
 * [contentPadding][QuackTagStyle.contentPadding]이
 * 무시되고 태그의 높이가 10dp로 적용됩니다. 컴포넌트 사이즈를 명시하면서 패딩을 적용하고 싶다면
 * [contentPadding][QuackTagStyle.contentPadding] 대신에 [Modifier.padding]을 사용하세요.
 * [LayoutModifier]를 사용하는 흔한 [Modifier]로는 [Modifier.size], [Modifier.height], [Modifier.width] 등이
 * 있습니다. [LayoutModifierNode]를 사용하는 [Modifier]는 [contentPadding][QuackTagStyle.contentPadding] 무시
 * 옵션이 아직 지원되지 않습니다. ([#636](https://github.com/duckie-team/quack-quack-android/issues/636))
 *
 * ### 사용 가능 데코레이터
 *
 * |                         style                          | [trailingIcon][Modifier.trailingIcon]
 * |            description             |
 * |:------------------------------------------------------:|:-------------------------------------:|:----------------------------------:|
 * |          [Outlined][QuackOutlinedTagDefaults]          |                   ⭕                  
 * |                                    |
 * |            [Filled][QuackFilledTagDefaults]            |                   ⭕                  
 * |                                    |
 * |     [GrayscaleFlat][QuackGrayscaleFlatTagDefaults]     |                   ❌                  
 * | 태그의 너비가 좁기에 아이콘 데코레이터를 사용할 수 없습니다. |
 * | [GrayscaleOutlined][QuackGrayscaleOutlinedTagDefaults] |                   ⭕                  
 * |                                    |
 *
 * This component uses [QuackTagStyle.GrayscaleOutlined] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackGrayscaleOutlinedTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
): Unit {
  QuackTag(
    text = text,
    style = QuackTagStyle.GrayscaleOutlined,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}
