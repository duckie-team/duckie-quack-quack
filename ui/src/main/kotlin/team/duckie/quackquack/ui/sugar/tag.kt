// This file was automatically generated by sugar-core.
// Do not modify it manually.
@file:OptIn(SugarCompilerApi::class, SugarGeneratorUsage::class)
@file:SugarGeneratedFile
@file:Suppress("ktlint", "detekt:all", "ModifierParameter")

package team.duckie.quackquack.ui.sugar

import androidx.compose.runtime.Composable
import androidx.compose.runtime.NonRestartableComposable
import androidx.compose.ui.Modifier
import team.duckie.quackquack.casa.annotation.Casa
import team.duckie.quackquack.casa.annotation.CasaValue
import team.duckie.quackquack.casa.annotation.SugarGeneratorUsage
import team.duckie.quackquack.sugar.material.SugarCompilerApi
import team.duckie.quackquack.sugar.material.SugarGeneratedFile
import team.duckie.quackquack.sugar.material.SugarRefer
import team.duckie.quackquack.sugar.material.sugar
import team.duckie.quackquack.ui.QuackTag
import team.duckie.quackquack.ui.QuackTagStyle
import team.duckie.quackquack.ui.util.ExperimentalQuackQuackApi

/**
 * 태그를 그립니다.
 *
 * This component uses [QuackTagStyle.Outlined] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackOutlinedTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackTag(
    text = text,
    style = QuackTagStyle.Outlined,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 태그를 그립니다.
 *
 * This component uses [QuackTagStyle.Filled] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackFilledTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackTag(
    text = text,
    style = QuackTagStyle.Filled,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 태그를 그립니다.
 *
 * This component uses [QuackTagStyle.GrayscaleFlat] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackGrayscaleFlatTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackTag(
    text = text,
    style = QuackTagStyle.GrayscaleFlat,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}

/**
 * 태그를 그립니다.
 *
 * This component uses [QuackTagStyle.GrayscaleOutlined] as the token value for `style`.
 *
 * This document was automatically generated by [QuackTag].
 * If any contents are broken or wanna see the entire contents, please check the original document.
 *
 * @param text 중앙에 표시할 텍스트
 * @param selected 선택 상태 여부
 * @param rippleEnabled 클릭했을 때 리플 애니메이션을 적용할지 여부
 * @param onClick 클릭했을 때 실행할 람다식. 태그는 토글이 자유로워야 하므로 [selected]와 관계 없이
 * 항상 클릭 가능합니다.
 */
@Casa
@Composable
@NonRestartableComposable
@ExperimentalQuackQuackApi
@SugarRefer("team.duckie.quackquack.ui.QuackTag")
public fun QuackGrayscaleOutlinedTag(
  @CasaValue("\"QuackTagPreview\"") text: String,
  modifier: Modifier = sugar(),
  selected: Boolean = sugar(),
  rippleEnabled: Boolean = sugar(),
  @CasaValue("{}") onClick: () -> Unit,
) {
  QuackTag(
    text = text,
    style = QuackTagStyle.GrayscaleOutlined,
    modifier = modifier,
    selected = selected,
    rippleEnabled = rippleEnabled,
    onClick = onClick,
  )
}
