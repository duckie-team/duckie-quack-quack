// https://github.com/droidknights/DroidKnights2021_App/blob/main/gradle/dependencyGraph.gradle
task projectDependencyGraph {
    doLast {
        def dot = new File(rootProject.rootDir, "art/project-dependency-graph/graph.dot")
        dot.parentFile.mkdirs()
        dot.delete()

        dot << "digraph {\n"
        dot << "  graph [label=\"${rootProject.name}\\n \",labelloc=t,fontsize=30,ranksep=1.4];\n"
        dot << "  node [style=filled, fillcolor=\"#bbbbbb\"];\n"
        dot << "  rankdir=TB;\n"

        def rootProjects = []
        def queue = [rootProject]
        while (!queue.isEmpty()) {
            def project = queue.remove(0)
            rootProjects.add(project)
            queue.addAll(project.childProjects.values())
        }

        def projects = new LinkedHashSet<Project>()
        def dependencies = new LinkedHashMap<Tuple2<Project, Project>, List<String>>()
        def androidProjects = []
        def androidLibraryProjects = []
        def androidDynamicFeatureProjects = []

        queue = [rootProject]
        while (!queue.isEmpty()) {
            def project = queue.remove(0)
            queue.addAll(project.childProjects.values())

            if (project.plugins.hasPlugin("com.android.application")) {
                androidProjects.add(project)
            }
            if (project.plugins.hasPlugin("com.android.library")) {
                androidLibraryProjects.add(project)
            }
            if (project.plugins.hasPlugin("com.android.dynamic-feature")) {
                androidDynamicFeatureProjects.add(project)
            }

            project.configurations.all { config ->
                if (config.name.toLowerCase().contains("test")) return
                config.dependencies
                        .withType(ProjectDependency)
                        .collect { it.dependencyProject }
                        .each { dependency ->
                            projects.add(project)
                            projects.add(dependency)
                            rootProjects.remove(dependency)

                            def graphKey = new Tuple2<Project, Project>(project, dependency)
                            def traits = dependencies.computeIfAbsent(graphKey) {
                                new ArrayList<String>()
                            }

                            if (config.name.toLowerCase().endsWith("implementation")) {
                                traits.add("style=dotted")
                            }
                        }
            }
        }

        projects = projects.sort { it.path }

        dot << "\n  # Projects\n\n"
        for (project in projects) {
            def traits = []

            if (androidProjects.contains(project)) {
                traits.add("fillcolor=\"#baffc9\"")
            } else if (androidLibraryProjects.contains(project)) {
                traits.add("fillcolor=\"#81D4FA\"")
            } else if (androidDynamicFeatureProjects.contains(project)) {
                traits.add("fillcolor=\"#c9baff\"")
            } else {
                traits.add("fillcolor=\"#eeeeee\"")
            }

            dot << "  \"${project.path}\" [${traits.join(", ")}];\n"
        }

        dot << "\n  {rank = same;"
        for (project in projects) {
            if (rootProjects.contains(project)) {
                dot << " \"${project.path}\";"
            }
        }
        dot << "}\n"

        dot << "\n  # Dependencies\n\n"
        dependencies.forEach { key, traits ->
            dot << "  \"${key.v1.path}\" -> \"${key.v2.path}\""
            if (!traits.isEmpty()) {
                dot << " [${traits.join(", ")}]"
            }
            dot << "\n"
        }

        dot << "}\n"

        def process = "dot -Tpng -O graph.dot".execute([], dot.parentFile)
        process.waitFor()
        if (process.exitValue() != 0) {
            throw new RuntimeException(process.errorStream.text)
        }
        dot.delete()

        println("Project module dependency graph created at ${dot.absolutePath}.png")
    }
}